{"version":3,"sources":["components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["CustomModal","props","handleChange","e","target","name","value","type","checked","activeItem","state","setState","this","toggle","onSave","Modal","isOpen","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","title","onChange","placeholder","description","check","completed","ModalFooter","Button","color","onClick","Component","App","refreshList","axios","get","then","res","todoList","data","catch","err","console","log","displayCompleted","status","viewCompleted","renderTabList","className","renderItems","filter","item","map","key","id","editItem","handleDelete","modal","handleSubmit","put","post","delete","createItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f947fc0b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n    import {\n      Button,\n      Modal,\n      ModalHeader,\n      ModalBody,\n      ModalFooter,\n      Form,\n      FormGroup,\n      Input,\n      Label\n    } from \"reactstrap\";\n\n    export default class CustomModal extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          activeItem: this.props.activeItem\n        };\n      }\n      handleChange = e => {\n        let { name, value } = e.target;\n        if (e.target.type === \"checkbox\") {\n          value = e.target.checked;\n        }\n        const activeItem = { ...this.state.activeItem, [name]: value };\n        this.setState({ activeItem });\n      };\n      render() {\n        const { toggle, onSave } = this.props;\n        return (\n          <Modal isOpen={true} toggle={toggle}>\n            <ModalHeader toggle={toggle}> Todo Item </ModalHeader>\n            <ModalBody>\n              <Form>\n                <FormGroup>\n                  <Label for=\"title\">Title</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"title\"\n                    value={this.state.activeItem.title}\n                    onChange={this.handleChange}\n                    placeholder=\"Enter Todo Title\"\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"description\">Description</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"description\"\n                    value={this.state.activeItem.description}\n                    onChange={this.handleChange}\n                    placeholder=\"Enter Todo description\"\n                  />\n                </FormGroup>\n                <FormGroup check>\n                  <Label for=\"completed\">\n                    <Input\n                      type=\"checkbox\"\n                      name=\"completed\"\n                      checked={this.state.activeItem.completed}\n                      onChange={this.handleChange}\n                    />\n                    Completed\n                  </Label>\n                </FormGroup>\n              </Form>\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\n                Save\n              </Button>\n            </ModalFooter>\n          </Modal>\n        );\n      }\n    }\n","import React, { Component } from \"react\";\n    import Modal from \"./components/Modal\";\n    import axios from \"axios\";\n\n    class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          viewCompleted: false,\n          activeItem: {\n            title: \"\",\n            description: \"\",\n            completed: false\n          },\n          todoList: []\n        };\n      }\n      componentDidMount() {\n        this.refreshList();\n      }\n      refreshList = () => {\n        axios\n          .get(\"http://localhost:8000/api/todos/\")\n          .then(res => this.setState({ todoList: res.data }))\n          .catch(err => console.log(err));\n      };\n      displayCompleted = status => {\n        if (status) {\n          return this.setState({ viewCompleted: true });\n        }\n        return this.setState({ viewCompleted: false });\n      };\n      renderTabList = () => {\n        return (\n          <div className=\"my-5 tab-list\">\n            <span\n              onClick={() => this.displayCompleted(true)}\n              className={this.state.viewCompleted ? \"active\" : \"\"}\n            >\n              complete\n            </span>\n            <span\n              onClick={() => this.displayCompleted(false)}\n              className={this.state.viewCompleted ? \"\" : \"active\"}\n            >\n              Incomplete\n            </span>\n          </div>\n        );\n      };\n      renderItems = () => {\n        const { viewCompleted } = this.state;\n        const newItems = this.state.todoList.filter(\n          item => item.completed === viewCompleted\n        );\n        return newItems.map(item => (\n          <li\n            key={item.id}\n            className=\"list-group-item d-flex justify-content-between align-items-center\"\n          >\n            <span\n              className={`todo-title mr-2 ${\n                this.state.viewCompleted ? \"completed-todo\" : \"\"\n              }`}\n              title={item.description}\n            >\n              {item.title}\n            </span>\n            <span>\n              <button\n                onClick={() => this.editItem(item)}\n                className=\"btn btn-secondary mr-2\"\n              >\n                {\" \"}\n                Edit{\" \"}\n              </button>\n              <button\n                onClick={() => this.handleDelete(item)}\n                className=\"btn btn-danger\"\n              >\n                Delete{\" \"}\n              </button>\n            </span>\n          </li>\n        ));\n      };\n      toggle = () => {\n        this.setState({ modal: !this.state.modal });\n      };\n      handleSubmit = item => {\n        this.toggle();\n        if (item.id) {\n          axios\n            .put(`http://localhost:8000/api/todos/${item.id}/`, item)\n            .then(res => this.refreshList());\n          return;\n        }\n        axios\n          .post(\"http://localhost:8000/api/todos/\", item)\n          .then(res => this.refreshList());\n      };\n      handleDelete = item => {\n        axios\n          .delete(`http://localhost:8000/api/todos/${item.id}`)\n          .then(res => this.refreshList());\n      };\n      createItem = () => {\n        const item = { title: \"\", description: \"\", completed: false };\n        this.setState({ activeItem: item, modal: !this.state.modal });\n      };\n      editItem = item => {\n        this.setState({ activeItem: item, modal: !this.state.modal });\n      };\n      render() {\n        return (\n          <main className=\"content\">\n            <h1 className=\"text-white text-uppercase text-center my-4\">Todo app</h1>\n            <div className=\"row \">\n              <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n                <div className=\"card p-3\">\n                  <div className=\"\">\n                    <button onClick={this.createItem} className=\"btn btn-primary\">\n                      Add task\n                    </button>\n                  </div>\n                  {this.renderTabList()}\n                  <ul className=\"list-group list-group-flush\">\n                    {this.renderItems()}\n                  </ul>\n                </div>\n              </div>\n            </div>\n            {this.state.modal ? (\n              <Modal\n                activeItem={this.state.activeItem}\n                toggle={this.toggle}\n                onSave={this.handleSubmit}\n              />\n            ) : null}\n          </main>\n        );\n      }\n    }\n    export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","      import React from 'react';\n      import ReactDOM from 'react-dom';\n      import 'bootstrap/dist/css/bootstrap.min.css';       // add this\n      import './index.css';\n      import App from './App';\n      import * as serviceWorker from './serviceWorker';\n\n      ReactDOM.render(<App />, document.getElementById('root'));\n      // If you want your app to work offline and load faster, you can change\n      // unregister() to register() below. Note this comes with some pitfalls.\n      // Learn more about service workers: http://bit.ly/CRA-PWA\n      serviceWorker.unregister();"],"sourceRoot":""}